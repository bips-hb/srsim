#ifdef _OPENMP
  #include <omp.h>
#endif

#include <RcppArmadillo.h>

using namespace Rcpp;

//' Valid Report
//' 
//' Checks whether the given report is 'valid'. A report should contain at least
//' one drug and at least one event (otherwise it would never been sent to the 
//' spontaneous reporitng sytem anyway).
//' 
//' @param report A logical matrix with one row and \code{n_drugs + n_events} columns
//' @param n_drugs The total number of drugs 
//' @param n_events The total number of events 
//' 
//' @return \code{TRUE} when the report is valid, \code{FALSE} otherwise
//' @export
// [[Rcpp::export]] 
bool validReport (Rcpp::LogicalMatrix report, int n_drugs, int n_events) {
  bool valid = false ; 
  for (int i = 0; i < n_drugs; i ++) {
    if (report(0, i)) {
      valid = true ; 
    } 
  }
  
  if (!valid) {
    return false ; 
  }

  for (int i = n_drugs; i < n_drugs + n_events; i ++) {
    if (report(0, i)) {
      return true ; 
    } 
  }

  return false ; 
}

//' Simulate a single Report
//' 
//' Returns a single report for a spontaneous reporting system. 
//' Note that this function does not check whether the report is 
//' 'valid', see \code{\link{validReport}}
//' 
//' @param n_drugs The number of drugs 
//' @param n_events The number of events 
//' @param n_parents A vector with the number of parents for each of the nodes
//' @param beta0 A vector with the intercepts for the logistic regression models
//' @param beta1 A vector with the regression coefficients for each node 
//' @param parent_id A vector with the id of the parent 
//' 
//' @return A binary vector
// [[Rcpp::export]]
Rcpp::IntegerVector simulateReport(int n_drugs, int n_events,
                                         Rcpp::IntegerVector n_parents,
                                         Rcpp::NumericVector beta0, 
                                         Rcpp::NumericVector beta1, 
                                         Rcpp::IntegerVector parent_id) {
  
  int i; 
  int n = n_drugs + n_events ; 
  double logit ; 
  
  // vector to hold the current report 
  Rcpp::IntegerVector report(n, -1) ; 
  
  // Keeps track of which indices in the report have already been set
  Rcpp::LogicalVector drawn(n, false) ;
  
  bool all_drawn ; // true only when the report is completely filled
  bool parent_drawn ; 
  
  do {
    // go over all nodes
    for (i = 0; i < n; i++) {
      if (!drawn[i]) { // check whether the node is already drawn
        
        logit = beta0[i] ; 
        
        parent_drawn = true ;
        if (n_parents[i] == 1) { 
          if (drawn[parent_id[i]-1]) {
            logit += beta1[i] * report[parent_id[i]-1] ; 
          } else { 
            parent_drawn = false ;  
          }
        }
        
        if (parent_drawn) { 
          report[i] = rbinom(1, 1, exp(logit) / (1 + exp(logit)))[0] ;  
          drawn[i] = true ; 
        } 
      }
    }
    
    // check whether all variates are drawn
    all_drawn = true ; 
    for (i = 0; i < n; i++) {
      if (!drawn[i]) { 
        all_drawn = false ;
        break ; 
      }
    }
  } while (!all_drawn) ; 
  
  return(report) ; 
  
}

//' Create 2 x 2 Tables 
//' 
//' Creates a data frame containing all 2 x 2 contingency tables 
//' from the results generated by \code{\link{simulateSRS}}. 
//' See the R wrapper function \code{\link{convert2Tables}}
//' for more information. 
//' 
//' @param reports A binary matrix. Each row is a report
//' @param prob_drugs A vector with the marginal probabilities of the drugs 
//' @param prob_events A vector with the marginal probabilities of the events
//' @param n_parents A vector with the number of parents for each of the nodes
//' @param parent_id A vector with the id of the parent 
//' @param beta1 A vector with the regression coefficients for each node 
//' 
//' @return A dataframe. A description of the columns can be found in the commentary
//'         for the function \code{\link{convert2Tables}}
//' 
//' @seealso \code{\link{convert2Tables}}
// [[Rcpp::export]]
Rcpp::DataFrame create2x2TablesDAGRcpp (Rcpp::IntegerMatrix reports, 
                                        Rcpp::NumericVector prob_drugs, 
                                        Rcpp::NumericVector prob_events,
                                        Rcpp::IntegerVector n_parents,
                                        Rcpp::IntegerVector parent_id,
                                        Rcpp::NumericVector beta1) {
  int n_drugs = prob_drugs.size() ; 
  int n_events = prob_events.size() ; 
  int n_pairs = n_drugs * n_events ; 
  int k ; 
  
  // create vectors that will make up the data frame 
  Rcpp::IntegerVector drug_id (n_pairs) ;
  Rcpp::IntegerVector event_id (n_pairs) ;
  Rcpp::NumericVector prob_drug (n_pairs) ;
  Rcpp::NumericVector prob_event (n_pairs) ;
  Rcpp::NumericVector OR (n_pairs, 1.0) ;
  Rcpp::LogicalVector associated (n_pairs, false) ; 
  Rcpp::IntegerVector a (n_pairs, 0) ;
  Rcpp::IntegerVector b (n_pairs, 0) ;
  Rcpp::IntegerVector c (n_pairs, 0) ;
  Rcpp::IntegerVector d (n_pairs, 0) ;
  
  // run over all pairs and fill the vectors
  for (int i = 0; i < n_drugs; i ++) {
    for (int j = 0; j < n_events; j ++) {
      k = i*n_events + j ; // current pair index
      drug_id[k]        = i+1 ; 
      event_id[k]       = j+1 ; 
      prob_drug[k]      = prob_drugs[i] ; 
      prob_event[k]     = prob_events[j] ; 
      
      if (n_parents[j + n_drugs] == 1) {
        if (i == (parent_id[j + n_drugs]-1)) {
          OR[k] = exp(beta1[j + n_drugs]) ; 
          associated[k] = true ; 
        }
      }
    }
  }
  
  // compute the actual tables
  // go over all the reports
  bool drug, event ; 
  for (int r = 0; r < reports.nrow(); r ++) {
    // go over all drug-event pairs 
    for (int i = 0; i < n_drugs; i ++) {
      for (int j = 0; j < n_events; j ++) {
        k = i*n_events + j ; // pair index
        drug = (reports(r, i) == 1) ; 
        event = (reports(r, n_drugs + j) == 1) ; 
        if (drug) {
          if (event) {
            a[k] ++ ; 
          } else {
            c[k] ++ ; 
          }
        } else {
          if (event) {
            b[k] ++ ; 
          } else {
            d[k] ++ ; 
          }
        }
      } 
    }
  }
  
  return Rcpp::DataFrame::create( Named("drug_id") = drug_id, 
                                  Named("event_id") = event_id, 
                                  Named("prob_drug") = prob_drug, 
                                  Named("prob_event") = prob_event,
                                  Named("or") = OR,
                                  Named("associated") = associated,
                                  Named("a") = a, 
                                  Named("b") = b,
                                  Named("c") = c,
                                  Named("d") = d
  ) ; 
}
